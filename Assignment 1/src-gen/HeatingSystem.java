/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class HeatingSystem implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_HEATING_ON,
		MAIN_REGION_HEATING_OFF,
		MAIN_REGION_ON_TIMER,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
			
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public HeatingSystem() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		turnOnHeating = false;
		turnOffHeating = false;
		switchOnTimer = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_HEATING_ON:
			main_region_Heating_On_react(-1);
			break;
		case MAIN_REGION_HEATING_OFF:
			main_region_Heating_Off_react(-1);
			break;
		case MAIN_REGION_ON_TIMER:
			main_region_On_Timer_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			nextEvent();
		} while ((((turnOnHeating || turnOffHeating) || switchOnTimer) || timeEvents[0]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_HEATING_ON:
			return stateVector[0] == State.MAIN_REGION_HEATING_ON;
		case MAIN_REGION_HEATING_OFF:
			return stateVector[0] == State.MAIN_REGION_HEATING_OFF;
		case MAIN_REGION_ON_TIMER:
			return stateVector[0] == State.MAIN_REGION_ON_TIMER;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	private boolean turnOnHeating;
	
	
	public void raiseTurnOnHeating() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				turnOnHeating = true;
			}
		});
		runCycle();
	}
	
	private boolean turnOffHeating;
	
	
	public void raiseTurnOffHeating() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				turnOffHeating = true;
			}
		});
		runCycle();
	}
	
	private boolean switchOnTimer;
	
	
	public void raiseSwitchOnTimer() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				switchOnTimer = true;
			}
		});
		runCycle();
	}
	
	/* Entry action for state 'Heating On'. */
	private void entryAction_main_region_Heating_On() {
		timerService.setTimer(this, 0, (60 * 1000), false);
	}
	
	/* Exit action for state 'Heating On'. */
	private void exitAction_main_region_Heating_On() {
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Heating On */
	private void enterSequence_main_region_Heating_On_default() {
		entryAction_main_region_Heating_On();
		stateVector[0] = State.MAIN_REGION_HEATING_ON;
	}
	
	/* 'default' enter sequence for state Heating Off */
	private void enterSequence_main_region_Heating_Off_default() {
		stateVector[0] = State.MAIN_REGION_HEATING_OFF;
	}
	
	/* 'default' enter sequence for state On Timer */
	private void enterSequence_main_region_On_Timer_default() {
		stateVector[0] = State.MAIN_REGION_ON_TIMER;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Heating On */
	private void exitSequence_main_region_Heating_On() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Heating_On();
	}
	
	/* Default exit sequence for state Heating Off */
	private void exitSequence_main_region_Heating_Off() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state On Timer */
	private void exitSequence_main_region_On_Timer() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_HEATING_ON:
			exitSequence_main_region_Heating_On();
			break;
		case MAIN_REGION_HEATING_OFF:
			exitSequence_main_region_Heating_Off();
			break;
		case MAIN_REGION_ON_TIMER:
			exitSequence_main_region_On_Timer();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Heating_On_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Heating_On_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOffHeating) {
				exitSequence_main_region_Heating_On();
				enterSequence_main_region_Heating_Off_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Heating_On();
					enterSequence_main_region_On_Timer_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Heating_Off_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOnHeating) {
				exitSequence_main_region_Heating_Off();
				enterSequence_main_region_Heating_On_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (switchOnTimer) {
					exitSequence_main_region_Heating_Off();
					enterSequence_main_region_On_Timer_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_On_Timer_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOnHeating) {
				exitSequence_main_region_On_Timer();
				enterSequence_main_region_Heating_On_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (turnOffHeating) {
					exitSequence_main_region_On_Timer();
					enterSequence_main_region_Heating_Off_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
