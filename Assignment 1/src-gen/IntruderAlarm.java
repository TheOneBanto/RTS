/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class IntruderAlarm implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_DISARMED,
		MAIN_REGION_PARTIALLY_ARMED,
		MAIN_REGION_FULLY_ARMED,
		MAIN_REGION_ACTIVATE_CAMERA,
		MAIN_REGION_AWAIT_USER_INPUT,
		MAIN_REGION_SIREN_BLAIRS_AND_AWAITING_PASSWORD,
		MAIN_REGION_SEND_PICTURE_TO_MONITORING_STATION,
		MAIN_REGION_LOUDER_SIREN_BLAIRS_AND_CAPTURE_LIVE_FEED,
		MAIN_REGION_DELETE_PHOTO,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
			
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public IntruderAlarm() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setAlarmType(0);
		
		setTakePicture(false);
		
		setTime(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		turnOnPartialAlarm = false;
		turnOffAlarm = false;
		turnOnFullAlarm = false;
		alarmTriggered = false;
		failureToInputPassword = false;
		passwordInputted = false;
		adminDisarm = false;
		monitoringStationTurnsOffAlarm = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_DISARMED:
			main_region_Disarmed_react(-1);
			break;
		case MAIN_REGION_PARTIALLY_ARMED:
			main_region_Partially_Armed_react(-1);
			break;
		case MAIN_REGION_FULLY_ARMED:
			main_region_Fully_Armed_react(-1);
			break;
		case MAIN_REGION_ACTIVATE_CAMERA:
			main_region_Activate_Camera_react(-1);
			break;
		case MAIN_REGION_AWAIT_USER_INPUT:
			main_region_Await_user_input_react(-1);
			break;
		case MAIN_REGION_SIREN_BLAIRS_AND_AWAITING_PASSWORD:
			main_region_Siren_blairs_and_awaiting_password_react(-1);
			break;
		case MAIN_REGION_SEND_PICTURE_TO_MONITORING_STATION:
			main_region_Send_picture_to_monitoring_station_react(-1);
			break;
		case MAIN_REGION_LOUDER_SIREN_BLAIRS_AND_CAPTURE_LIVE_FEED:
			main_region_Louder_siren_blairs_and_capture_live_feed_react(-1);
			break;
		case MAIN_REGION_DELETE_PHOTO:
			main_region_Delete_photo_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			nextEvent();
		} while ((((((((((((turnOnPartialAlarm || turnOffAlarm) || turnOnFullAlarm) || alarmTriggered) || failureToInputPassword) || passwordInputted) || adminDisarm) || monitoringStationTurnsOffAlarm) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_DISARMED:
			return stateVector[0] == State.MAIN_REGION_DISARMED;
		case MAIN_REGION_PARTIALLY_ARMED:
			return stateVector[0] == State.MAIN_REGION_PARTIALLY_ARMED;
		case MAIN_REGION_FULLY_ARMED:
			return stateVector[0] == State.MAIN_REGION_FULLY_ARMED;
		case MAIN_REGION_ACTIVATE_CAMERA:
			return stateVector[0] == State.MAIN_REGION_ACTIVATE_CAMERA;
		case MAIN_REGION_AWAIT_USER_INPUT:
			return stateVector[0] == State.MAIN_REGION_AWAIT_USER_INPUT;
		case MAIN_REGION_SIREN_BLAIRS_AND_AWAITING_PASSWORD:
			return stateVector[0] == State.MAIN_REGION_SIREN_BLAIRS_AND_AWAITING_PASSWORD;
		case MAIN_REGION_SEND_PICTURE_TO_MONITORING_STATION:
			return stateVector[0] == State.MAIN_REGION_SEND_PICTURE_TO_MONITORING_STATION;
		case MAIN_REGION_LOUDER_SIREN_BLAIRS_AND_CAPTURE_LIVE_FEED:
			return stateVector[0] == State.MAIN_REGION_LOUDER_SIREN_BLAIRS_AND_CAPTURE_LIVE_FEED;
		case MAIN_REGION_DELETE_PHOTO:
			return stateVector[0] == State.MAIN_REGION_DELETE_PHOTO;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	private boolean turnOnPartialAlarm;
	
	
	public void raiseTurnOnPartialAlarm() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				turnOnPartialAlarm = true;
			}
		});
		runCycle();
	}
	
	private boolean turnOffAlarm;
	
	
	public void raiseTurnOffAlarm() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				turnOffAlarm = true;
			}
		});
		runCycle();
	}
	
	private boolean turnOnFullAlarm;
	
	
	public void raiseTurnOnFullAlarm() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				turnOnFullAlarm = true;
			}
		});
		runCycle();
	}
	
	private boolean alarmTriggered;
	
	
	public void raiseAlarmTriggered() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				alarmTriggered = true;
			}
		});
		runCycle();
	}
	
	private boolean failureToInputPassword;
	
	
	public void raiseFailureToInputPassword() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				failureToInputPassword = true;
			}
		});
		runCycle();
	}
	
	private boolean passwordInputted;
	
	
	public void raisePasswordInputted() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				passwordInputted = true;
			}
		});
		runCycle();
	}
	
	private boolean adminDisarm;
	
	
	public void raiseAdminDisarm() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				adminDisarm = true;
			}
		});
		runCycle();
	}
	
	private boolean monitoringStationTurnsOffAlarm;
	
	
	public void raiseMonitoringStationTurnsOffAlarm() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				monitoringStationTurnsOffAlarm = true;
			}
		});
		runCycle();
	}
	
	private long alarmType;
	
	public long getAlarmType() {
		return alarmType;
	}
	
	public void setAlarmType(long value) {
		this.alarmType = value;
	}
	
	private boolean takePicture;
	
	public boolean getTakePicture() {
		return takePicture;
	}
	
	public void setTakePicture(boolean value) {
		this.takePicture = value;
	}
	
	private long time;
	
	public long getTime() {
		return time;
	}
	
	public void setTime(long value) {
		this.time = value;
	}
	
	/* Entry action for state 'Partially Armed'. */
	private void entryAction_main_region_Partially_Armed() {
		setTime(40);
	}
	
	/* Entry action for state 'Fully Armed'. */
	private void entryAction_main_region_Fully_Armed() {
		setTime(20);
	}
	
	/* Entry action for state 'Activate Camera'. */
	private void entryAction_main_region_Activate_Camera() {
		timerService.setTimer(this, 0, 1, false);
		
		setTakePicture(true);
	}
	
	/* Entry action for state 'Await user input'. */
	private void entryAction_main_region_Await_user_input() {
		timerService.setTimer(this, 1, (getTime() * 1000), false);
	}
	
	/* Entry action for state 'Siren blairs and awaiting password'. */
	private void entryAction_main_region_Siren_blairs_and_awaiting_password() {
		timerService.setTimer(this, 2, (20 * 1000), false);
	}
	
	/* Entry action for state 'Send picture to monitoring station'. */
	private void entryAction_main_region_Send_picture_to_monitoring_station() {
		timerService.setTimer(this, 3, 10, false);
	}
	
	/* Exit action for state 'Activate Camera'. */
	private void exitAction_main_region_Activate_Camera() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Await user input'. */
	private void exitAction_main_region_Await_user_input() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Siren blairs and awaiting password'. */
	private void exitAction_main_region_Siren_blairs_and_awaiting_password() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Send picture to monitoring station'. */
	private void exitAction_main_region_Send_picture_to_monitoring_station() {
		timerService.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state Disarmed */
	private void enterSequence_main_region_Disarmed_default() {
		stateVector[0] = State.MAIN_REGION_DISARMED;
	}
	
	/* 'default' enter sequence for state Partially Armed */
	private void enterSequence_main_region_Partially_Armed_default() {
		entryAction_main_region_Partially_Armed();
		stateVector[0] = State.MAIN_REGION_PARTIALLY_ARMED;
	}
	
	/* 'default' enter sequence for state Fully Armed */
	private void enterSequence_main_region_Fully_Armed_default() {
		entryAction_main_region_Fully_Armed();
		stateVector[0] = State.MAIN_REGION_FULLY_ARMED;
	}
	
	/* 'default' enter sequence for state Activate Camera */
	private void enterSequence_main_region_Activate_Camera_default() {
		entryAction_main_region_Activate_Camera();
		stateVector[0] = State.MAIN_REGION_ACTIVATE_CAMERA;
	}
	
	/* 'default' enter sequence for state Await user input */
	private void enterSequence_main_region_Await_user_input_default() {
		entryAction_main_region_Await_user_input();
		stateVector[0] = State.MAIN_REGION_AWAIT_USER_INPUT;
	}
	
	/* 'default' enter sequence for state Siren blairs and awaiting password */
	private void enterSequence_main_region_Siren_blairs_and_awaiting_password_default() {
		entryAction_main_region_Siren_blairs_and_awaiting_password();
		stateVector[0] = State.MAIN_REGION_SIREN_BLAIRS_AND_AWAITING_PASSWORD;
	}
	
	/* 'default' enter sequence for state Send picture to monitoring station */
	private void enterSequence_main_region_Send_picture_to_monitoring_station_default() {
		entryAction_main_region_Send_picture_to_monitoring_station();
		stateVector[0] = State.MAIN_REGION_SEND_PICTURE_TO_MONITORING_STATION;
	}
	
	/* 'default' enter sequence for state Louder siren blairs and capture live feed */
	private void enterSequence_main_region_Louder_siren_blairs_and_capture_live_feed_default() {
		stateVector[0] = State.MAIN_REGION_LOUDER_SIREN_BLAIRS_AND_CAPTURE_LIVE_FEED;
	}
	
	/* 'default' enter sequence for state Delete photo */
	private void enterSequence_main_region_Delete_photo_default() {
		stateVector[0] = State.MAIN_REGION_DELETE_PHOTO;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Disarmed */
	private void exitSequence_main_region_Disarmed() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Partially Armed */
	private void exitSequence_main_region_Partially_Armed() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Fully Armed */
	private void exitSequence_main_region_Fully_Armed() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Activate Camera */
	private void exitSequence_main_region_Activate_Camera() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Activate_Camera();
	}
	
	/* Default exit sequence for state Await user input */
	private void exitSequence_main_region_Await_user_input() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Await_user_input();
	}
	
	/* Default exit sequence for state Siren blairs and awaiting password */
	private void exitSequence_main_region_Siren_blairs_and_awaiting_password() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Siren_blairs_and_awaiting_password();
	}
	
	/* Default exit sequence for state Send picture to monitoring station */
	private void exitSequence_main_region_Send_picture_to_monitoring_station() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Send_picture_to_monitoring_station();
	}
	
	/* Default exit sequence for state Louder siren blairs and capture live feed */
	private void exitSequence_main_region_Louder_siren_blairs_and_capture_live_feed() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Delete photo */
	private void exitSequence_main_region_Delete_photo() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_DISARMED:
			exitSequence_main_region_Disarmed();
			break;
		case MAIN_REGION_PARTIALLY_ARMED:
			exitSequence_main_region_Partially_Armed();
			break;
		case MAIN_REGION_FULLY_ARMED:
			exitSequence_main_region_Fully_Armed();
			break;
		case MAIN_REGION_ACTIVATE_CAMERA:
			exitSequence_main_region_Activate_Camera();
			break;
		case MAIN_REGION_AWAIT_USER_INPUT:
			exitSequence_main_region_Await_user_input();
			break;
		case MAIN_REGION_SIREN_BLAIRS_AND_AWAITING_PASSWORD:
			exitSequence_main_region_Siren_blairs_and_awaiting_password();
			break;
		case MAIN_REGION_SEND_PICTURE_TO_MONITORING_STATION:
			exitSequence_main_region_Send_picture_to_monitoring_station();
			break;
		case MAIN_REGION_LOUDER_SIREN_BLAIRS_AND_CAPTURE_LIVE_FEED:
			exitSequence_main_region_Louder_siren_blairs_and_capture_live_feed();
			break;
		case MAIN_REGION_DELETE_PHOTO:
			exitSequence_main_region_Delete_photo();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Disarmed_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Disarmed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOnPartialAlarm) {
				exitSequence_main_region_Disarmed();
				enterSequence_main_region_Partially_Armed_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (turnOnFullAlarm) {
					exitSequence_main_region_Disarmed();
					enterSequence_main_region_Fully_Armed_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Partially_Armed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOffAlarm) {
				exitSequence_main_region_Partially_Armed();
				enterSequence_main_region_Disarmed_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (alarmTriggered) {
					exitSequence_main_region_Partially_Armed();
					enterSequence_main_region_Activate_Camera_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Fully_Armed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOffAlarm) {
				exitSequence_main_region_Fully_Armed();
				enterSequence_main_region_Disarmed_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (alarmTriggered) {
					exitSequence_main_region_Fully_Armed();
					enterSequence_main_region_Activate_Camera_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Activate_Camera_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_main_region_Activate_Camera();
				enterSequence_main_region_Await_user_input_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Await_user_input_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[1]) {
				exitSequence_main_region_Await_user_input();
				enterSequence_main_region_Siren_blairs_and_awaiting_password_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (passwordInputted) {
					exitSequence_main_region_Await_user_input();
					enterSequence_main_region_Delete_photo_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Siren_blairs_and_awaiting_password_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[2]) {
				exitSequence_main_region_Siren_blairs_and_awaiting_password();
				enterSequence_main_region_Send_picture_to_monitoring_station_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (passwordInputted) {
					exitSequence_main_region_Siren_blairs_and_awaiting_password();
					enterSequence_main_region_Delete_photo_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Send_picture_to_monitoring_station_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[3]) {
				exitSequence_main_region_Send_picture_to_monitoring_station();
				enterSequence_main_region_Louder_siren_blairs_and_capture_live_feed_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Louder_siren_blairs_and_capture_live_feed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (monitoringStationTurnsOffAlarm) {
				exitSequence_main_region_Louder_siren_blairs_and_capture_live_feed();
				enterSequence_main_region_Disarmed_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Delete_photo_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (turnOffAlarm) {
				exitSequence_main_region_Delete_photo();
				enterSequence_main_region_Disarmed_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
