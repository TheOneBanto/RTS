/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class CoffeeMachineDispenser implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_AWAIT_CORRECT_MONEY,
		MAIN_REGION_HEAT_WATER,
		MAIN_REGION_SELECT_OPTION,
		MAIN_REGION_RETURN_MONEY,
		MAIN_REGION_DROP_CUP,
		MAIN_REGION_ADD_COFFEE_SHOT,
		MAIN_REGION_ADD_STEAMED_MILK,
		MAIN_REGION_ADD_HOT_WATER,
		MAIN_REGION_OPEN_DOOR,
		MAIN_REGION_CLOSE_DOOR,
		MAIN_REGION_ADD_FROTHY_MILK,
		MAIN_REGION_AMERICANO,
		MAIN_REGION_LATTE_SELECTED,
		MAIN_REGION_CAPPUCCINO_SELECTED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
			
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public CoffeeMachineDispenser() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setTime(0);
		
		setAmericano(false);
		
		setLatte(false);
		
		setCappuccino(false);
		
		setMilkCoffeeSelected(false);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		myEvent = false;
		correctMoneyReceived = false;
		cancelledOrder = false;
		readyCup = false;
		coffeeTaken = false;
		selectAmericano = false;
		selectCappuccino = false;
		selectLatte = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_AWAIT_CORRECT_MONEY:
			main_region_Await_correct_money_react(-1);
			break;
		case MAIN_REGION_HEAT_WATER:
			main_region_Heat_water_react(-1);
			break;
		case MAIN_REGION_SELECT_OPTION:
			main_region_Select_option_react(-1);
			break;
		case MAIN_REGION_RETURN_MONEY:
			main_region_Return_money_react(-1);
			break;
		case MAIN_REGION_DROP_CUP:
			main_region_Drop_Cup_react(-1);
			break;
		case MAIN_REGION_ADD_COFFEE_SHOT:
			main_region_Add_coffee_shot_react(-1);
			break;
		case MAIN_REGION_ADD_STEAMED_MILK:
			main_region_Add_Steamed_Milk_react(-1);
			break;
		case MAIN_REGION_ADD_HOT_WATER:
			main_region_Add_hot_water_react(-1);
			break;
		case MAIN_REGION_OPEN_DOOR:
			main_region_Open_Door_react(-1);
			break;
		case MAIN_REGION_CLOSE_DOOR:
			main_region_Close_Door_react(-1);
			break;
		case MAIN_REGION_ADD_FROTHY_MILK:
			main_region_Add_frothy_milk_react(-1);
			break;
		case MAIN_REGION_AMERICANO:
			main_region_Americano_react(-1);
			break;
		case MAIN_REGION_LATTE_SELECTED:
			main_region_Latte_Selected_react(-1);
			break;
		case MAIN_REGION_CAPPUCCINO_SELECTED:
			main_region_Cappuccino_Selected_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			microStep();
			clearInEvents();
			nextEvent();
		} while (((((((((((((myEvent || correctMoneyReceived) || cancelledOrder) || readyCup) || coffeeTaken) || selectAmericano) || selectCappuccino) || selectLatte) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_AWAIT_CORRECT_MONEY:
			return stateVector[0] == State.MAIN_REGION_AWAIT_CORRECT_MONEY;
		case MAIN_REGION_HEAT_WATER:
			return stateVector[0] == State.MAIN_REGION_HEAT_WATER;
		case MAIN_REGION_SELECT_OPTION:
			return stateVector[0] == State.MAIN_REGION_SELECT_OPTION;
		case MAIN_REGION_RETURN_MONEY:
			return stateVector[0] == State.MAIN_REGION_RETURN_MONEY;
		case MAIN_REGION_DROP_CUP:
			return stateVector[0] == State.MAIN_REGION_DROP_CUP;
		case MAIN_REGION_ADD_COFFEE_SHOT:
			return stateVector[0] == State.MAIN_REGION_ADD_COFFEE_SHOT;
		case MAIN_REGION_ADD_STEAMED_MILK:
			return stateVector[0] == State.MAIN_REGION_ADD_STEAMED_MILK;
		case MAIN_REGION_ADD_HOT_WATER:
			return stateVector[0] == State.MAIN_REGION_ADD_HOT_WATER;
		case MAIN_REGION_OPEN_DOOR:
			return stateVector[0] == State.MAIN_REGION_OPEN_DOOR;
		case MAIN_REGION_CLOSE_DOOR:
			return stateVector[0] == State.MAIN_REGION_CLOSE_DOOR;
		case MAIN_REGION_ADD_FROTHY_MILK:
			return stateVector[0] == State.MAIN_REGION_ADD_FROTHY_MILK;
		case MAIN_REGION_AMERICANO:
			return stateVector[0] == State.MAIN_REGION_AMERICANO;
		case MAIN_REGION_LATTE_SELECTED:
			return stateVector[0] == State.MAIN_REGION_LATTE_SELECTED;
		case MAIN_REGION_CAPPUCCINO_SELECTED:
			return stateVector[0] == State.MAIN_REGION_CAPPUCCINO_SELECTED;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	private boolean myEvent;
	
	
	public void raiseMyEvent() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				myEvent = true;
			}
		});
		runCycle();
	}
	
	private boolean correctMoneyReceived;
	
	
	public void raiseCorrectMoneyReceived() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				correctMoneyReceived = true;
			}
		});
		runCycle();
	}
	
	private boolean cancelledOrder;
	
	
	public void raiseCancelledOrder() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				cancelledOrder = true;
			}
		});
		runCycle();
	}
	
	private boolean readyCup;
	
	
	public void raiseReadyCup() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				readyCup = true;
			}
		});
		runCycle();
	}
	
	private boolean coffeeTaken;
	
	
	public void raiseCoffeeTaken() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				coffeeTaken = true;
			}
		});
		runCycle();
	}
	
	private boolean selectAmericano;
	
	
	public void raiseSelectAmericano() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				selectAmericano = true;
			}
		});
		runCycle();
	}
	
	private boolean selectCappuccino;
	
	
	public void raiseSelectCappuccino() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				selectCappuccino = true;
			}
		});
		runCycle();
	}
	
	private boolean selectLatte;
	
	
	public void raiseSelectLatte() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				selectLatte = true;
			}
		});
		runCycle();
	}
	
	private long time;
	
	public long getTime() {
		return time;
	}
	
	public void setTime(long value) {
		this.time = value;
	}
	
	private boolean americano;
	
	public boolean getAmericano() {
		return americano;
	}
	
	public void setAmericano(boolean value) {
		this.americano = value;
	}
	
	private boolean latte;
	
	public boolean getLatte() {
		return latte;
	}
	
	public void setLatte(boolean value) {
		this.latte = value;
	}
	
	private boolean cappuccino;
	
	public boolean getCappuccino() {
		return cappuccino;
	}
	
	public void setCappuccino(boolean value) {
		this.cappuccino = value;
	}
	
	private boolean milkCoffeeSelected;
	
	public boolean getMilkCoffeeSelected() {
		return milkCoffeeSelected;
	}
	
	public void setMilkCoffeeSelected(boolean value) {
		this.milkCoffeeSelected = value;
	}
	
	/* Entry action for state 'Await correct money'. */
	private void entryAction_main_region_Await_correct_money() {
		setAmericano(false);
		
		setLatte(false);
		
		setCappuccino(false);
	}
	
	/* Entry action for state 'Heat water'. */
	private void entryAction_main_region_Heat_water() {
		timerService.setTimer(this, 0, (10 * 1000), false);
	}
	
	/* Entry action for state 'Add Steamed Milk'. */
	private void entryAction_main_region_Add_Steamed_Milk() {
		timerService.setTimer(this, 1, (5 * 1000), false);
		
		timerService.setTimer(this, 2, (10 * 1000), false);
	}
	
	/* Entry action for state 'Add hot water'. */
	private void entryAction_main_region_Add_hot_water() {
		timerService.setTimer(this, 3, (8 * 1000), false);
	}
	
	/* Entry action for state 'Add frothy milk'. */
	private void entryAction_main_region_Add_frothy_milk() {
		timerService.setTimer(this, 4, (5 * 1000), false);
	}
	
	/* Entry action for state 'Americano'. */
	private void entryAction_main_region_Americano() {
		setAmericano(true);
	}
	
	/* Entry action for state 'Latte Selected'. */
	private void entryAction_main_region_Latte_Selected() {
		setLatte(true);
		
		setMilkCoffeeSelected(true);
	}
	
	/* Entry action for state 'Cappuccino Selected'. */
	private void entryAction_main_region_Cappuccino_Selected() {
		setCappuccino(true);
		
		setMilkCoffeeSelected(true);
	}
	
	/* Exit action for state 'Heat water'. */
	private void exitAction_main_region_Heat_water() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Add Steamed Milk'. */
	private void exitAction_main_region_Add_Steamed_Milk() {
		timerService.unsetTimer(this, 1);
		
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Add hot water'. */
	private void exitAction_main_region_Add_hot_water() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Add frothy milk'. */
	private void exitAction_main_region_Add_frothy_milk() {
		timerService.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state Await correct money */
	private void enterSequence_main_region_Await_correct_money_default() {
		entryAction_main_region_Await_correct_money();
		stateVector[0] = State.MAIN_REGION_AWAIT_CORRECT_MONEY;
	}
	
	/* 'default' enter sequence for state Heat water */
	private void enterSequence_main_region_Heat_water_default() {
		entryAction_main_region_Heat_water();
		stateVector[0] = State.MAIN_REGION_HEAT_WATER;
	}
	
	/* 'default' enter sequence for state Select option */
	private void enterSequence_main_region_Select_option_default() {
		stateVector[0] = State.MAIN_REGION_SELECT_OPTION;
	}
	
	/* 'default' enter sequence for state Return money */
	private void enterSequence_main_region_Return_money_default() {
		stateVector[0] = State.MAIN_REGION_RETURN_MONEY;
	}
	
	/* 'default' enter sequence for state Drop Cup */
	private void enterSequence_main_region_Drop_Cup_default() {
		stateVector[0] = State.MAIN_REGION_DROP_CUP;
	}
	
	/* 'default' enter sequence for state Add coffee shot */
	private void enterSequence_main_region_Add_coffee_shot_default() {
		stateVector[0] = State.MAIN_REGION_ADD_COFFEE_SHOT;
	}
	
	/* 'default' enter sequence for state Add Steamed Milk */
	private void enterSequence_main_region_Add_Steamed_Milk_default() {
		entryAction_main_region_Add_Steamed_Milk();
		stateVector[0] = State.MAIN_REGION_ADD_STEAMED_MILK;
	}
	
	/* 'default' enter sequence for state Add hot water */
	private void enterSequence_main_region_Add_hot_water_default() {
		entryAction_main_region_Add_hot_water();
		stateVector[0] = State.MAIN_REGION_ADD_HOT_WATER;
	}
	
	/* 'default' enter sequence for state Open Door */
	private void enterSequence_main_region_Open_Door_default() {
		stateVector[0] = State.MAIN_REGION_OPEN_DOOR;
	}
	
	/* 'default' enter sequence for state Close Door */
	private void enterSequence_main_region_Close_Door_default() {
		stateVector[0] = State.MAIN_REGION_CLOSE_DOOR;
	}
	
	/* 'default' enter sequence for state Add frothy milk */
	private void enterSequence_main_region_Add_frothy_milk_default() {
		entryAction_main_region_Add_frothy_milk();
		stateVector[0] = State.MAIN_REGION_ADD_FROTHY_MILK;
	}
	
	/* 'default' enter sequence for state Americano */
	private void enterSequence_main_region_Americano_default() {
		entryAction_main_region_Americano();
		stateVector[0] = State.MAIN_REGION_AMERICANO;
	}
	
	/* 'default' enter sequence for state Latte Selected */
	private void enterSequence_main_region_Latte_Selected_default() {
		entryAction_main_region_Latte_Selected();
		stateVector[0] = State.MAIN_REGION_LATTE_SELECTED;
	}
	
	/* 'default' enter sequence for state Cappuccino Selected */
	private void enterSequence_main_region_Cappuccino_Selected_default() {
		entryAction_main_region_Cappuccino_Selected();
		stateVector[0] = State.MAIN_REGION_CAPPUCCINO_SELECTED;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Await correct money */
	private void exitSequence_main_region_Await_correct_money() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Heat water */
	private void exitSequence_main_region_Heat_water() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Heat_water();
	}
	
	/* Default exit sequence for state Select option */
	private void exitSequence_main_region_Select_option() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Return money */
	private void exitSequence_main_region_Return_money() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Drop Cup */
	private void exitSequence_main_region_Drop_Cup() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Add coffee shot */
	private void exitSequence_main_region_Add_coffee_shot() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Add Steamed Milk */
	private void exitSequence_main_region_Add_Steamed_Milk() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Add_Steamed_Milk();
	}
	
	/* Default exit sequence for state Add hot water */
	private void exitSequence_main_region_Add_hot_water() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Add_hot_water();
	}
	
	/* Default exit sequence for state Open Door */
	private void exitSequence_main_region_Open_Door() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Close Door */
	private void exitSequence_main_region_Close_Door() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Add frothy milk */
	private void exitSequence_main_region_Add_frothy_milk() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Add_frothy_milk();
	}
	
	/* Default exit sequence for state Americano */
	private void exitSequence_main_region_Americano() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Latte Selected */
	private void exitSequence_main_region_Latte_Selected() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Cappuccino Selected */
	private void exitSequence_main_region_Cappuccino_Selected() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_AWAIT_CORRECT_MONEY:
			exitSequence_main_region_Await_correct_money();
			break;
		case MAIN_REGION_HEAT_WATER:
			exitSequence_main_region_Heat_water();
			break;
		case MAIN_REGION_SELECT_OPTION:
			exitSequence_main_region_Select_option();
			break;
		case MAIN_REGION_RETURN_MONEY:
			exitSequence_main_region_Return_money();
			break;
		case MAIN_REGION_DROP_CUP:
			exitSequence_main_region_Drop_Cup();
			break;
		case MAIN_REGION_ADD_COFFEE_SHOT:
			exitSequence_main_region_Add_coffee_shot();
			break;
		case MAIN_REGION_ADD_STEAMED_MILK:
			exitSequence_main_region_Add_Steamed_Milk();
			break;
		case MAIN_REGION_ADD_HOT_WATER:
			exitSequence_main_region_Add_hot_water();
			break;
		case MAIN_REGION_OPEN_DOOR:
			exitSequence_main_region_Open_Door();
			break;
		case MAIN_REGION_CLOSE_DOOR:
			exitSequence_main_region_Close_Door();
			break;
		case MAIN_REGION_ADD_FROTHY_MILK:
			exitSequence_main_region_Add_frothy_milk();
			break;
		case MAIN_REGION_AMERICANO:
			exitSequence_main_region_Americano();
			break;
		case MAIN_REGION_LATTE_SELECTED:
			exitSequence_main_region_Latte_Selected();
			break;
		case MAIN_REGION_CAPPUCCINO_SELECTED:
			exitSequence_main_region_Cappuccino_Selected();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Await_correct_money_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Await_correct_money_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (correctMoneyReceived) {
				exitSequence_main_region_Await_correct_money();
				enterSequence_main_region_Heat_water_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Heat_water_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_main_region_Heat_water();
				enterSequence_main_region_Select_option_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Select_option_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (cancelledOrder) {
				exitSequence_main_region_Select_option();
				enterSequence_main_region_Return_money_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (selectAmericano) {
					exitSequence_main_region_Select_option();
					enterSequence_main_region_Americano_default();
					react(0);
					transitioned_after = 0;
				} else {
					if (selectLatte) {
						exitSequence_main_region_Select_option();
						enterSequence_main_region_Latte_Selected_default();
						react(0);
						transitioned_after = 0;
					} else {
						if (selectCappuccino) {
							exitSequence_main_region_Select_option();
							enterSequence_main_region_Cappuccino_Selected_default();
							react(0);
							transitioned_after = 0;
						}
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Return_money_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_main_region_Return_money();
			enterSequence_main_region_Await_correct_money_default();
			react(0);
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Drop_Cup_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_main_region_Drop_Cup();
			enterSequence_main_region_Add_coffee_shot_default();
			react(0);
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Add_coffee_shot_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (getMilkCoffeeSelected()) {
				exitSequence_main_region_Add_coffee_shot();
				enterSequence_main_region_Add_Steamed_Milk_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (getAmericano()) {
					exitSequence_main_region_Add_coffee_shot();
					enterSequence_main_region_Add_hot_water_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Add_Steamed_Milk_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (((timeEvents[1]) && (getCappuccino()))) {
				exitSequence_main_region_Add_Steamed_Milk();
				enterSequence_main_region_Add_frothy_milk_default();
				react(0);
				transitioned_after = 0;
			} else {
				if (((timeEvents[2]) && (getLatte()))) {
					exitSequence_main_region_Add_Steamed_Milk();
					enterSequence_main_region_Open_Door_default();
					react(0);
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Add_hot_water_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[3]) {
				exitSequence_main_region_Add_hot_water();
				enterSequence_main_region_Open_Door_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Open_Door_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (coffeeTaken) {
				exitSequence_main_region_Open_Door();
				enterSequence_main_region_Close_Door_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Close_Door_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_main_region_Close_Door();
			enterSequence_main_region_Await_correct_money_default();
			react(0);
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Add_frothy_milk_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[4]) {
				exitSequence_main_region_Add_frothy_milk();
				enterSequence_main_region_Open_Door_default();
				react(0);
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Americano_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_main_region_Americano();
			enterSequence_main_region_Drop_Cup_default();
			react(0);
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Latte_Selected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_main_region_Latte_Selected();
			enterSequence_main_region_Drop_Cup_default();
			react(0);
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Cappuccino_Selected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			exitSequence_main_region_Cappuccino_Selected();
			enterSequence_main_region_Drop_Cup_default();
			react(0);
			transitioned_after = 0;
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
